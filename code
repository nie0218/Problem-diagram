import graphviz

# 创建图
dot = graphviz.Digraph()
# Define nodes for machine domain
dot.node('SunSearchControlSoftware', shape='component')

# 给定领域和设计领域节点
given_domains = [
    'Gyroscopes',
    'SunSensors',
    'ThreeAxisControlThrusters',
    'DataManagementComputer',
    'SerialPort',
    'Analog-to-DigitalConverter',
    'StoredCircuit',
    'Timer',
    'ControllerRegisters',
    'DigitalTube',
    'ControlSystem',
    'InterruptServiceProgram',
    'Satellite'
]

for domain in given_domains:
    dot.node(domain, shape='box')
    dot.edge('SunSearchControlSoftware',domain, dir='none')


# 添加需求领域和现象
requirements = [
    ('Gyroscopes', 'Reference', 'Data Acquisition'),
    ('Gyroscopes', 'Constraint', 'Address for Sending Commands and Receiving Data'),
    ('SunSensors', 'Reference', 'Data Acquisition'),
    ('SunSensors', 'Constraint', 'Data Collection Format'),
    ('ThreeAxisControlThrusters', 'Reference', 'Control'),
    ('ThreeAxisControlThrusters', 'Constraint', 'Jetting Frequency'),
    ('ControlSystem', 'Reference', 'Composition'),
    ('ControlSystem', 'Constraint', 'Safety Criticality Level'),
    ('InterruptServiceProgram', 'Reference', 'Timer Interrupt'),
    ('InterruptServiceProgram', 'Constraint', 'Timer Configuration'),
    ('ControllerRegisters', 'Reference', 'Address'),
    ('ControllerRegisters', 'Constraint', 'Register Configuration'),
    ('DigitalTube', 'Reference', 'Telemetry Data Transmission')
]

for requirement in requirements:
    dot.node(requirement[2], shape='ellipse', style='dashed')
    if requirement[1] == 'Reference':
        dot.edge(requirement[0], requirement[2], style='dashed', dir='none')
    elif requirement[1] == 'Constraint':
        dot.edge(requirement[0], requirement[2], style='dashed', dir='back')

# 添加现象共享
phenomena_sharing = [
    ('SunSearchControlSoftware', 'Gyroscopes', 'Data Acquisition'),
    ('SunSearchControlSoftware', 'Gyroscopes', 'Address for Sending Commands and Receiving Data'),
    ('SunSearchControlSoftware', 'SunSensors', 'Data Acquisition'),
    ('SunSearchControlSoftware', 'SunSensors', 'Data Collection Format'),
    ('SunSearchControlSoftware', 'ThreeAxisControlThrusters', 'Control'),
    ('SunSearchControlSoftware', 'ThreeAxisControlThrusters', 'Jetting Frequency'),
    ('SunSearchControlSoftware', 'InterruptServiceProgram', 'Timer Interrupt'),
    ('SunSearchControlSoftware', 'ControllerRegisters', 'Address'),
    ('SunSearchControlSoftware', 'DigitalTube', 'Telemetry Data Transmission'),
    ('SunSearchControlSoftware', 'SerialPort', 'Data Transmission'),
    ('SunSearchControlSoftware', 'Timer', 'Control Cycle'),
    ('SunSearchControlSoftware', 'SerialPort', 'Command Reception and Data Transmission'),
    ('SunSensors', 'Analog-to-DigitalConverter', 'Data Conversion'),
    ('ThreeAxisControlThrusters', 'Analog-to-DigitalConverter', 'Data Conversion'),
    ('DataManagementComputer', 'SunSearchControlSoftware', 'Ground Command Reception'),
    ('Satellite', 'SunSearchControlSoftware', 'Attitude Angle and Angular Velocity')
]
for sharing in phenomena_sharing:
    dot.edge(sharing[0], sharing[1], label=sharing[2], dir='none')

# 添加现象共享 rankdir：指定图形的布局方向 nodesep：指定节点之间的水平间距 ranksep：指定节点之间的垂直间距。
dot.attr(rankdir='LR',nodesep='0.3',ranksep='0.5')
# 保存并展示图
dot.render('Sun', format='png',cleanup=True)
